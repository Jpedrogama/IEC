//Programa : Controle de 2 sensores HC-SR04 - NewPing
//Autor : Adilson Thomsen (Atualizado por João Pedro da Gama e Natalie)

//Inicializa as bibliotecas do sensor Ultrasonico
#include <NewPing.h>
#include <MFRC522.h>
#include <SPI.h>
#include <Servo.h>

//Determina o numero de sensores no circuito
#define SONAR_NUM     6
//Determina a distancia maxima de deteccao
#define MAX_DISTANCE 150
//Intervalo de tempo entre as medicoes - valor minimo 29ms
#define PING_INTERVAL 33

#define SS_PIN 13                       //pino SS(NSS) do RFID
#define RST_PIN 12                      //pino RST do RFID

MFRC522 mfrc522(SS_PIN, RST_PIN);   // Criando uma instancia do MFRC522.
Servo  cancelaentrada;              // declarando servo motor de entrada

//Armazena a quantidade de vezes que a medicao deve ocorrer, para cada sensor
unsigned long pingTimer[SONAR_NUM];
//Armazena o numero de medicoes
unsigned int cm[SONAR_NUM];
// Armazena o numero do sensor ativo
uint8_t currentSensor = 0;    

// Declarção display 7 segmentos
byte seven_seg_digits[7][7] = { { 1,1,1,1,1,1,0 },  // = Digito 0
                                 { 0,1,1,0,0,0,0 },  // = Digito 1
                                 { 1,1,0,1,1,0,1 },  // = Digito 2
                                 { 1,1,1,1,0,0,1 },  // = Digito 3
                                 { 0,1,1,0,0,1,1 },  // = Digito 4
                                 { 1,0,1,1,0,1,1 },  // = Digito 5
                                 { 1,0,1,1,1,1,1 },  // = Digito 6
                                };
                                 

NewPing sonar[SONAR_NUM] = 
{ 
  //Inicializa os sensores nos pinos especificados
  //(pino_trigger, pino_echo, distancia_maxima)
  //Sensor 0
  NewPing(34, 35, MAX_DISTANCE),
  //Sensor 1
  NewPing(36, 37, MAX_DISTANCE),
  //Sensor q
  NewPing(38, 39, MAX_DISTANCE),
  //Sensor 3
  NewPing(40, 41, MAX_DISTANCE),
  //Sensor 4
  NewPing(42, 43, MAX_DISTANCE),
  //Sensor 5
  NewPing(44, 45, MAX_DISTANCE),
};



//declaração de variaveis diversas/////////////////////////////////////////////////////////////////////////////////////////////////////////////
int j=0;
int i;
int ledr[6] = {22,24,26,28,30,32};                                  //relaçao dos pinos de cada led vermelho
int sensor[6] = { 0, 0, 0, 0, 0, 0 };                               // Array de sensores
int vagaslivres = 6;                                               //Contador de vagas livres.
int vagasocupadas = 0;                                             //Contador de vagas ocupadas.
String cliente[6] = {"0", "0", "0", "0", "0", "0"};                // vetor que guarda o id de cada cliente
boolean novo = false;

void setup() 
{

  SPI.begin();
  mfrc522.PCD_Init();   // Inicia MFRC522

  // Inicializando servos
  cancelaentrada.attach(10);
  cancelaentrada.write(5);
  
  Serial.begin(115200);
  //Inicia a primeira medicao com 75ms
  pingTimer[0] = millis() + 75;
  //Define o tempo de inicializacao de cada sensor
  for (uint8_t i = 1; i < SONAR_NUM; i++){
    pingTimer[i] = pingTimer[i - 1] + PING_INTERVAL;
  }

   // Inicializando os leds
   for (byte i = 0; i < 3; i++){
    pinMode(ledr[i], OUTPUT);
   }

  // Inicializando portas do display 7 segmentos
  pinMode(2, OUTPUT); //Pino 2 do Arduino ligado ao segmento A
  pinMode(3, OUTPUT); //Pino 3 do Arduino ligado ao segmento B
  pinMode(4, OUTPUT); //Pino 4 do Arduino ligado ao segmento C
  pinMode(5, OUTPUT); //Pino 5 do Arduino ligado ao segmento D
  pinMode(6, OUTPUT); //Pino 6 do Arduino ligado ao segmento E
  pinMode(7, OUTPUT); //Pino 7 do Arduino ligado ao segmento F
  pinMode(8, OUTPUT); //Pino 8 do Arduino ligado ao segmento G
  pinMode(9, OUTPUT); //Pino 9 do Arduino ligado ao segmento PONTO  
}


void loop() 
{
  //Faz um loop entre todos os sensores
  for (uint8_t i = 0; i < SONAR_NUM; i++) { // Loop entre todos os sensores
    if (millis() >= pingTimer[i]) {         
      pingTimer[i] += PING_INTERVAL * SONAR_NUM;  
      if (i == 0 && currentSensor == SONAR_NUM - 1) oneSensorCycle();
      sonar[currentSensor].timer_stop();
      currentSensor = i;
      cm[currentSensor] = 0;
      sonar[currentSensor].ping_timer(echoCheck);
    }
  }

//acendendo led de vaga ocupada///////////////////////////////////////////////////////////////////////////////////////////////


//contar vagas para display//////////////////////////////////////////////////////////////////////////////////////////////////
vagaslivres = sensor[0]+sensor[1]+sensor[2]+sensor[3]+sensor[4]+sensor[5];
vagasocupadas= 6 - vagasocupadas;
sevenSegWrite(vagaslivres);

 
  // RFID
  if ( ! mfrc522.PICC_IsNewCardPresent()) // Procura novo cartão
  {
    return;
  }

  if ( ! mfrc522.PICC_ReadCardSerial()) // Seleciona um dos cartões
  {
    return;
  }
  Serial.print("UID da tag :"); //Mostra UID na serial
  String id= "";
  
  //cria um id para cada cartão
  for (byte i = 0; i < mfrc522.uid.size; i++) 
  {
     Serial.print(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " ");
     Serial.print(mfrc522.uid.uidByte[i], HEX);
     id.concat(String(mfrc522.uid.uidByte[i] < 0x10 ? " 0" : " "));
     id.concat(String(mfrc522.uid.uidByte[i], HEX));
  }
  Serial.println();
  id.toUpperCase();
  
//Faz a leiura do cartão e verifica se o cliente esta no estacionamento para liberar a saida
   for (byte i = 0; i < 6; i++)
  {
    if (id.substring(1) == cliente[i])
      {
        Serial.print(i + 1);
        Serial.println(" Cliente esta saindo");
        Serial.println(cliente[i]);
        for(j=10; j<40; j++){
          cancelaentrada.write(j);
          delay(15);
        }
        delay(3000);
        for(j=40; j>=10; j--){
          cancelaentrada.write(j);
          delay(15);
        }
        cliente[i] = "0";
        Serial.println(cliente[i]);
        i = 6;
      }
    else if (i == 5)
    {
      novo = true;
    }
  }
//caso tiver vagas e o id do cartão não estiver no vetor, libera a entrada
  if (vagaslivres > 0)
  {
    if (novo == true)
    {
      for (byte i = 0; i < 6; i++)
      {
        if (cliente[i] == "0")
        {
          cliente[i] = id.substring(1);
          Serial.print(i + 1);
          Serial.println(" Cliente esta entrando");
          Serial.println(cliente[i]);
        for(j=10; j<40; j++){
          cancelaentrada.write(j);
          delay(15);
        }
        delay(3000);
        for(j=40; j>=10; j--){
          cancelaentrada.write(j);
          delay(15);
        }
          i = 6;
          novo = false;
        }
      }
    }
  }


}

void echoCheck() 
{ 
  //Se receber um sinal (eco), calcula a distancia
  if (sonar[currentSensor].check_timer())
    cm[currentSensor] = sonar[currentSensor].ping_result / US_ROUNDTRIP_CM;
}

void oneSensorCycle() 
{ 
  // Ciclo de leitura do sensor
  for (uint8_t i = 0; i < SONAR_NUM; i++) 
  {
    if (cm[i] < 13){  //sensor 1.
      sensor[i] = 0; //Incrementa o numero de vagas ocupadas na vaga1
      digitalWrite(ledr[i], HIGH);
    }
    else{
       sensor[i] = 1; //Marca a vaga 1 como livre
      digitalWrite(ledr[i], LOW);
    }
    //Imprime os valores lidos pelos sensores, no serial monitor
    Serial.print("Sensor : ");
    Serial.print(i); 
    Serial.print(" = ");
    Serial.print(cm[i]);
    Serial.print(" cm - ");
  }
  Serial.println();
}

void sevenSegWrite(byte digit)  //Funcao que aciona o display
{
  byte pin = 2;
  for (byte segCount = 0; segCount < 7; ++segCount) //Percorre o array ligando os segmentos correspondentes ao digito
  {
    digitalWrite(pin, seven_seg_digits[digit][segCount]);
    ++pin;
  }
}
